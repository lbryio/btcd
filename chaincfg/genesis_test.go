// Copyright (c) 2014-2016 The btcsuite developers
// Use of this source code is governed by an ISC
// license that can be found in the LICENSE file.

package chaincfg

import (
	"bytes"
	"testing"

	"github.com/davecgh/go-spew/spew"
)

// TestGenesisBlock tests the genesis block of the main network for validity by
// checking the encoded bytes and hashes.
func TestGenesisBlock(t *testing.T) {
	// Encode the genesis block to raw bytes.
	var buf bytes.Buffer
	err := MainNetParams.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestGenesisBlock: %v", err)
	}

	// Ensure the encoded block matches the expected bytes.
	if !bytes.Equal(buf.Bytes(), genesisBlockBytes) {
		t.Fatalf("TestGenesisBlock: Genesis block does not appear valid - "+
			"got %v, want %v", spew.Sdump(buf.Bytes()),
			spew.Sdump(genesisBlockBytes))
	}

	// Check hash of the block against expected hash.
	hash := MainNetParams.GenesisBlock.BlockHash()
	if !MainNetParams.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestGenesisBlock: Genesis block hash does not "+
			"appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(MainNetParams.GenesisHash))
	}
}

// TestRegTestGenesisBlock tests the genesis block of the regression test
// network for validity by checking the encoded bytes and hashes.
func TestRegTestGenesisBlock(t *testing.T) {
	// Encode the genesis block to raw bytes.
	var buf bytes.Buffer
	err := RegressionNetParams.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestRegTestGenesisBlock: %v", err)
	}

	// Ensure the encoded block matches the expected bytes.
	if !bytes.Equal(buf.Bytes(), regTestGenesisBlockBytes) {
		t.Fatalf("TestRegTestGenesisBlock: Genesis block does not "+
			"appear valid - got %v, want %v",
			spew.Sdump(buf.Bytes()),
			spew.Sdump(regTestGenesisBlockBytes))
	}

	// Check hash of the block against expected hash.
	hash := RegressionNetParams.GenesisBlock.BlockHash()
	if !RegressionNetParams.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestRegTestGenesisBlock: Genesis block hash does "+
			"not appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(RegressionNetParams.GenesisHash))
	}
}

// TestTestNet3GenesisBlock tests the genesis block of the test network (version
// 3) for validity by checking the encoded bytes and hashes.
func TestTestNet3GenesisBlock(t *testing.T) {
	// Encode the genesis block to raw bytes.
	var buf bytes.Buffer
	err := TestNet3Params.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestTestNet3GenesisBlock: %v", err)
	}

	// Ensure the encoded block matches the expected bytes.
	if !bytes.Equal(buf.Bytes(), testNet3GenesisBlockBytes) {
		t.Fatalf("TestTestNet3GenesisBlock: Genesis block does not "+
			"appear valid - got %v, want %v",
			spew.Sdump(buf.Bytes()),
			spew.Sdump(testNet3GenesisBlockBytes))
	}

	// Check hash of the block against expected hash.
	hash := TestNet3Params.GenesisBlock.BlockHash()
	if !TestNet3Params.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestTestNet3GenesisBlock: Genesis block hash does "+
			"not appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(TestNet3Params.GenesisHash))
	}
}

// TestSimNetGenesisBlock tests the genesis block of the simulation test network
// for validity by checking the encoded bytes and hashes.
func TestSimNetGenesisBlock(t *testing.T) {
	// Encode the genesis block to raw bytes.
	var buf bytes.Buffer
	err := SimNetParams.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestSimNetGenesisBlock: %v", err)
	}

	// Ensure the encoded block matches the expected bytes.
	if !bytes.Equal(buf.Bytes(), simNetGenesisBlockBytes) {
		t.Fatalf("TestSimNetGenesisBlock: Genesis block does not "+
			"appear valid - got %v, want %v",
			spew.Sdump(buf.Bytes()),
			spew.Sdump(simNetGenesisBlockBytes))
	}

	// Check hash of the block against expected hash.
	hash := SimNetParams.GenesisBlock.BlockHash()
	if !SimNetParams.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestSimNetGenesisBlock: Genesis block hash does "+
			"not appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(SimNetParams.GenesisHash))
	}
}

// genesisBlockBytes are the wire encoded bytes for the genesis block of the
// main network as of protocol version 60002.
var genesisBlockBytes = []byte{
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0xcc, 0x59, 0xe5, 0x9f, /* |.....Y..| */
	0xf9, 0x7a, 0xc0, 0x92, 0xb5, 0x5e, 0x42, 0x3a, /* |.z...^B:| */
	0xa5, 0x49, 0x51, 0x51, 0xed, 0x6f, 0xb8, 0x05, /* |.IQQ.o..| */
	0x70, 0xa5, 0xbb, 0x78, 0xcd, 0x5b, 0xd1, 0xc3, /* |p..x.[..| */
	0x82, 0x1c, 0x21, 0xb8, 0x01, 0x00, 0x00, 0x00, /* |..!.....| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x33, 0x19, 0x31, 0x56, /* |....3.1V| */
	0xff, 0xff, 0x00, 0x1f, 0x07, 0x05, 0x00, 0x00, /* |........| */
	0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, /* |........| */
	0xff, 0xff, 0x1f, 0x04, 0xff, 0xff, 0x00, 0x1d, /* |........| */
	0x01, 0x04, 0x17, 0x69, 0x6e, 0x73, 0x65, 0x72, /* |...inser| */
	0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, /* |t timest| */
	0x61, 0x6d, 0x70, 0x20, 0x73, 0x74, 0x72, 0x69, /* |amp stri| */
	0x6e, 0x67, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, /* |ng......| */
	0x00, 0x04, 0xbf, 0xc9, 0x1b, 0x8e, 0x00, 0x19, /* |........| */
	0x76, 0xa9, 0x14, 0x34, 0x59, 0x91, 0xdb, 0xf5, /* |v..4Y...| */
	0x7b, 0xfb, 0x01, 0x4b, 0x87, 0x00, 0x6a, 0xcd, /* |{..K..j.| */
	0xfa, 0xfb, 0xfc, 0x5f, 0xe8, 0x29, 0x2f, 0x88, /* |..._.)/.| */
	0xac, 0x00, 0x00, 0x00, 0x00, /* |.....| */
}

// regTestGenesisBlockBytes are the wire encoded bytes for the genesis block of
// the regression test network as of protocol version 60002.
var regTestGenesisBlockBytes = []byte{
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0xcc, 0x59, 0xe5, 0x9f, /* |.....Y..| */
	0xf9, 0x7a, 0xc0, 0x92, 0xb5, 0x5e, 0x42, 0x3a, /* |.z...^B:| */
	0xa5, 0x49, 0x51, 0x51, 0xed, 0x6f, 0xb8, 0x05, /* |.IQQ.o..| */
	0x70, 0xa5, 0xbb, 0x78, 0xcd, 0x5b, 0xd1, 0xc3, /* |p..x.[..| */
	0x82, 0x1c, 0x21, 0xb8, 0x01, 0x00, 0x00, 0x00, /* |..!.....| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x33, 0x19, 0x31, 0x56, /* |....3.1V| */
	0xff, 0xff, 0x7f, 0x20, 0x01, 0x00, 0x00, 0x00, /* |... ....| */
	0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, /* |........| */
	0xff, 0xff, 0x1f, 0x04, 0xff, 0xff, 0x00, 0x1d, /* |........| */
	0x01, 0x04, 0x17, 0x69, 0x6e, 0x73, 0x65, 0x72, /* |...inser| */
	0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, /* |t timest| */
	0x61, 0x6d, 0x70, 0x20, 0x73, 0x74, 0x72, 0x69, /* |amp stri| */
	0x6e, 0x67, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, /* |ng......| */
	0x00, 0x04, 0xbf, 0xc9, 0x1b, 0x8e, 0x00, 0x19, /* |........| */
	0x76, 0xa9, 0x14, 0x34, 0x59, 0x91, 0xdb, 0xf5, /* |v..4Y...| */
	0x7b, 0xfb, 0x01, 0x4b, 0x87, 0x00, 0x6a, 0xcd, /* |{..K..j.| */
	0xfa, 0xfb, 0xfc, 0x5f, 0xe8, 0x29, 0x2f, 0x88, /* |..._.)/.| */
	0xac, 0x00, 0x00, 0x00, 0x00, /* |.....| */

}

// testNet3GenesisBlockBytes are the wire encoded bytes for the genesis block of
// the test network (version 3) as of protocol version 60002.
var testNet3GenesisBlockBytes = []byte{
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0xcc, 0x59, 0xe5, 0x9f, /* |.....Y..| */
	0xf9, 0x7a, 0xc0, 0x92, 0xb5, 0x5e, 0x42, 0x3a, /* |.z...^B:| */
	0xa5, 0x49, 0x51, 0x51, 0xed, 0x6f, 0xb8, 0x05, /* |.IQQ.o..| */
	0x70, 0xa5, 0xbb, 0x78, 0xcd, 0x5b, 0xd1, 0xc3, /* |p..x.[..| */
	0x82, 0x1c, 0x21, 0xb8, 0x01, 0x00, 0x00, 0x00, /* |..!.....| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x33, 0x19, 0x31, 0x56, /* |....3.1V| */
	0xff, 0xff, 0x00, 0x1f, 0x07, 0x05, 0x00, 0x00, /* |........| */
	0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, /* |........| */
	0xff, 0xff, 0x1f, 0x04, 0xff, 0xff, 0x00, 0x1d, /* |........| */
	0x01, 0x04, 0x17, 0x69, 0x6e, 0x73, 0x65, 0x72, /* |...inser| */
	0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, /* |t timest| */
	0x61, 0x6d, 0x70, 0x20, 0x73, 0x74, 0x72, 0x69, /* |amp stri| */
	0x6e, 0x67, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, /* |ng......| */
	0x00, 0x04, 0xbf, 0xc9, 0x1b, 0x8e, 0x00, 0x19, /* |........| */
	0x76, 0xa9, 0x14, 0x34, 0x59, 0x91, 0xdb, 0xf5, /* |v..4Y...| */
	0x7b, 0xfb, 0x01, 0x4b, 0x87, 0x00, 0x6a, 0xcd, /* |{..K..j.| */
	0xfa, 0xfb, 0xfc, 0x5f, 0xe8, 0x29, 0x2f, 0x88, /* |..._.)/.| */
	0xac, 0x00, 0x00, 0x00, 0x00, /* |.....| */
}

// simNetGenesisBlockBytes are the wire encoded bytes for the genesis block of
// the simulation test network as of protocol version 70002.
var simNetGenesisBlockBytes = []byte{
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0xcc, 0x59, 0xe5, 0x9f, /* |.....Y..| */
	0xf9, 0x7a, 0xc0, 0x92, 0xb5, 0x5e, 0x42, 0x3a, /* |.z...^B:| */
	0xa5, 0x49, 0x51, 0x51, 0xed, 0x6f, 0xb8, 0x05, /* |.IQQ.o..| */
	0x70, 0xa5, 0xbb, 0x78, 0xcd, 0x5b, 0xd1, 0xc3, /* |p..x.[..| */
	0x82, 0x1c, 0x21, 0xb8, 0x00, 0x00, 0x00, 0x00, /* |..!.....| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x45, 0x06, 0x86, 0x53, /* |....E..S| */
	0xff, 0xff, 0x7f, 0x20, 0x02, 0x00, 0x00, 0x00, /* |... ....| */
	0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* |........| */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, /* |........| */
	0xff, 0xff, 0x1f, 0x04, 0xff, 0xff, 0x00, 0x1d, /* |........| */
	0x01, 0x04, 0x17, 0x69, 0x6e, 0x73, 0x65, 0x72, /* |...inser| */
	0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, /* |t timest| */
	0x61, 0x6d, 0x70, 0x20, 0x73, 0x74, 0x72, 0x69, /* |amp stri| */
	0x6e, 0x67, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, /* |ng......| */
	0x00, 0x04, 0xbf, 0xc9, 0x1b, 0x8e, 0x00, 0x19, /* |........| */
	0x76, 0xa9, 0x14, 0x34, 0x59, 0x91, 0xdb, 0xf5, /* |v..4Y...| */
	0x7b, 0xfb, 0x01, 0x4b, 0x87, 0x00, 0x6a, 0xcd, /* |{..K..j.| */
	0xfa, 0xfb, 0xfc, 0x5f, 0xe8, 0x29, 0x2f, 0x88, /* |..._.)/.| */
	0xac, 0x00, 0x00, 0x00, 0x00, /* |.....| */
}
